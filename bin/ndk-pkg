#!/bin/sh

#------------------------------------------------------------------------------
# Reference:   https://developer.android.google.cn/ndk/guides/other_build_systems
# requirement: Android NDK version must be r19 or newer.
#------------------------------------------------------------------------------

VERSION=0.1.0

NDK_PKG_HOME="$HOME/.ndk-pkg"
DIR_FORMULA="$NDK_PKG_HOME/formula"
DIR_DOWNLOAD="$NDK_PKG_HOME/downloads"
DIR_BOTTLE="$NDK_PKG_HOME/bottles"
DIR_BACKUP="$NDK_PKG_HOME/backup"
DIR_PKG="$NDK_PKG_HOME/pkg"

TARGET_ABIS='armeabi-v7a arm64-v8a x86 x86_64'

FORMULA_REPO_URL='https://github.com/leleliu008/ndk-pkg-formula.git'

#------------------------------------------------------------------------------

Color_Red='\033[0;31m'          # Red
Color_Green='\033[0;32m'        # Green
Color_Yellow='\033[0;33m'       # Yellow
Color_Blue='\033[0;34m'         # Blue
Color_Purple='\033[0;35m'       # Purple
Color_Off='\033[0m'             # Reset

msg() {
    printf "%b" "$1"
}

info() {
    msg "${Color_Purple}[❉] $@${Color_Off}"
}

success() {
    msg "${Color_Green}[✔] $@${Color_Off}"
}

warn() {
    msg "${Color_Yellow}[⌘] $@${Color_Off}"
}

error() {
    msg "${Color_Red}[✘] $@${Color_Off}"
}

error_exit() {
    msg "${Color_Red}[✘] $@${Color_Off}"
    exit 1
}

print_list() {
    for item in $@
    do
        msg "$item\n"
    done
}

nproc() {
    if command -v nproc > /dev/null ; then
        command nproc
    elif command -v sysctl > /dev/null ; then
        sysctl -n machdep.cpu.thread_count
    elif test -f /proc/cpuinfo ; then
        grep -c processor /proc/cpuinfo
    else
        printf "%b" 4
    fi
}

sed_in_place() {
    command -v gsed > /dev/null && gsed -i "$1" "$2" && return 0
    command -v sed  > /dev/null && (sed -i "$1" "$2" 2> /dev/null || sed -i "" "$1" "$2") && return 0
    error_exit "please install sed utility.\n"
}

convert_unix_timestamp_to_format_string() {
   date -jf "%s" "$1" "$2" 2> /dev/null ||
   date -d      "@$1" "$2"
}

get_ndk_version_via_awk() {
    awk -F= '/Pkg.Revision/{print(substr($2, 2))}' "$ANDROID_NDK_HOME/source.properties"
}

get_ndk_version_via_cut() {
    grep "Pkg.Revision" "$ANDROID_NDK_HOME/source.properties" | cut -d " " -f3
}

get_ndk_version_via_sed() {
    grep "Pkg.Revision" "$ANDROID_NDK_HOME/source.properties" | sed 's/Pkg\.Revision = \(.*\).*/\1/'
}

get_ndk_version_via_ruby() {
    ruby <<EOF
File.open(ENV['ANDROID_NDK_HOME'] + '/source.properties', 'r') {|f|
  f.each_line {|lineText|
    if (lineText =~ /Pkg.Revision =.*/)
        puts lineText.gsub('Pkg.Revision = ', '')
    end
  }
  f.close
}
EOF
}

get_ndk_version_via_perl() {
    perl << EOF
open(DATA, "<$ANDROID_NDK_HOME/source.properties") or die "$ANDROID_NDK_HOME/source.properties文件无法打开, $!";
while(<DATA>) {
    if ("\$_" =~ m/Pkg.Revision/) {
        print substr("\$_", 15);
    }
}
EOF
}

get_ndk_version_via_python() {
    "$PYTHON" << EOF
import re;
file = open("$ANDROID_NDK_HOME/source.properties");
lines = file.readlines();
for line in lines:
    if -1 != line.find("Pkg.Revision"):
        print(re.findall("[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,7}", line)[0]);
EOF
}

get_ndk_version_via_nodejs() {
    node << EOF
const fs = require('fs');

const buffer = fs.readFileSync("$ANDROID_NDK_HOME/source.properties");
if (buffer instanceof Error) {
    console.log(buffer);
    process.exit(1);
}

const text = buffer.toString();
const lines = text.split('\n');
lines.forEach((line, index, lines) => {
    const matched = line.match(/\d+\.\d+\.\d+/);
    if (matched) {
        console.log(matched[0]);
    }
});
EOF
}

get_ndk_version() {
    command -v cut  > /dev/null && get_ndk_version_via_cut    && return 0 
    command -v awk  > /dev/null && get_ndk_version_via_awk    && return 0
    command -v ruby > /dev/null && get_ndk_version_via_ruby   && return 0 
    command -v perl > /dev/null && get_ndk_version_via_perl   && return 0    
    command -v node > /dev/null && get_ndk_version_via_nodejs && return 0
    
    SED=$(command -v sed)
    [ -z "$SED" ] && SED=$(command -v gsed)
    [ -z "$SED" ] || get_ndk_version_via_sed && return 0
     
    PYTHON=$(command -v python3)
    [ -z "$PYTHON" ] && PYTHON=$(command -v python)
    [ -z "$PYTHON" ] || get_ndk_version_via_python && return 0
}

get_ndk_version_major() {
    command -v cut > /dev/null && printf "$ANDROID_NDK_VERSION" | cut -d. -f1          && return 0
    command -v awk > /dev/null && printf "$ANDROID_NDK_VERSION" | awk -F. '{print $1}' && return 0
    command -v sed > /dev/null && printf "$ANDROID_NDK_VERSION" | sed 's/\..*//g'      && return 0
    msg '0'
}

check_ANDROID_NDK_HOME() {
    [ -z "$ANDROID_ROOT" ] || export ANDROID_NDK_HOME="$ANDROID_ROOT"
    [ -z "$ANDROID_NDK_HOME" ] && error_exit "please set ANDROID_NDK_HOME environment variable, then try again!\n"
    [ -d "$ANDROID_NDK_HOME" ] || error_exit "ANDROID_NDK_HOME=$ANDROID_NDK_HOME is not a valid directory!\n"
}

check_ANDROID_NDK_VERSION() {
    ANDROID_NDK_VERSION="$(get_ndk_version)"
    [ "$(get_ndk_version_major)" -lt 19 ] && error_exit "your ndk version is $ANDROID_NDK_VERSION, please update to r19 or newer.\n"
}

list_target_abis() {
    print_list "$TARGET_ABIS"
}

list_target_apis() {
    print_list 21 22 23 34 25 26 27 28 29
}

#选择某个目标ABI，比如armeabi-v7a，可以通过ndk-pkg list target-abis命令列出支持的目标的名称
select_target_abi_if_needed() {
    [ -z "$TARGET_ABI" ] && {
        info "below is the supported TARGET_ABIS:\n"
        list_target_abis
        info "please input your select TARGET_ABI:"
        read -r TARGET_ABI
        select_target_abi_if_needed
    }
}

#选择某个目标API，比如21、22、23、34、25、26、27、28、29，可以通过ndk-pkg list target-apis命令列出支持的API level
select_target_api_if_needed() {
    [ -z "$TARGET_API" ] && {
        info "below is the supported target-apis:\n"
        list_target_apis
        info "please input your selected target-api:"
        read -r TARGET_API
        select_target_api_if_needed
    }
}

is_exist_and_executable() {
    [ -f "$1" ] || error_exit "$1 is not exsit.\n"
    [ -x "$1" ] || error_exit "$1 is not executable.\n"
}

make_env() {
    is_package_available "$1" || package_is_not_available_error_exit "$1"

    [ -z "$TARGET_API" ] && {
        TARGET_API=21
        warn "TARGET_API is not set. use default value 21.\n"
    }
    
    [ -z "$TARGET_ABI" ] && {
        TARGET_ABI='armeabi-v7a'
        warn "TARGET_ABI is not set. use default value armeabi-v7a.\n"
    }
    
    CMAKE_TOOLCHAIN_FILE="$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake"
    TOOLCHAIN_DIR="$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/$OS_NAME-$(uname -m)"
    SYSROOT="$TOOLCHAIN_DIR/sysroot"
    export PATH="$TOOLCHAIN_DIR/bin:$PATH"

    case "$TARGET_ABI" in
        armeabi-v7a) 
            export TOOLCHAIN_NAME='arm-linux-androideabi'
            export TARGET_HOST='armv7a-linux-androideabi'
            export TARGET_ARCH='arm'
            ;;
        arm64-v8a)
            export TOOLCHAIN_NAME='aarch64-linux-android'
            export TARGET_HOST='aarch64-linux-android'
            export TARGET_ARCH='arm64'
            ;;
        x86)
            export TOOLCHAIN_NAME='i686-linux-android'
            export TARGET_HOST='i686-linux-android'
            export TARGET_ARCH='x86'
            ;;
        x86_64)
            export TOOLCHAIN_NAME='x86_64-linux-android'
            export TARGET_HOST='x86_64-linux-android'
            export TARGET_ARCH='x86_64'
            ;;
        *)  export TOOLCHAIN_NAME='unkown'
            export TARGET_HOST='unkown'
            export TARGET_ARCH='unkown'
    esac

    
    FILE_PATH_LIBZ_SO="$TOOLCHAIN_DIR/sysroot/usr/lib/$TOOLCHAIN_NAME/$TARGET_API/libz.so"
    
    DIR_INSTALL_PACKAGE="$DIR_PKG/$1"
    DIR_INSTALL_PREFIX="$DIR_INSTALL_PACKAGE/$TARGET_ABI"
    [ -z "$DIR_SRC" ] || DIR_BUILD="$DIR_SRC/$TIMESTAMP/$TARGET_ABI"

    info "-------------------------------------------------------\n"
    info "        PKG_NAME = $1\n"
    info "    DEPENDENCIES = $(get_direct_dependencies_of_a_package "$1")\n"
    info "ANDROID_NDK_HOME = $ANDROID_NDK_HOME\n"
    info "ANDROID_NDK_VER  = $ANDROID_NDK_VERSION\n"
    info "CMAKE_TOOLCHAIN_FILE = $CMAKE_TOOLCHAIN_FILE\n"
    info "FILE_PATH_LIBZ_SO = $FILE_PATH_LIBZ_SO\n"
    info "   TOOLCHAIN_DIR = $TOOLCHAIN_DIR\n"
    info "   TOOLCHAIN_NAME= $TOOLCHAIN_NAME\n"
    info "         SYSROOT = $SYSROOT\n"
    info "     TARGET_HOST = $TARGET_HOST\n"
    info "     TARGET_ARCH = $TARGET_ARCH\n"
    info "     TARGET_ABI  = $TARGET_ABI\n"
    info "     TARGET_API  = $TARGET_API\n"
    info "DIR_INSTALL_PACKAGE= $DIR_INSTALL_PACKAGE\n"
    info "DIR_INSTALL_PREFIX = $DIR_INSTALL_PREFIX\n"
    info "     DIR_SRC     = $DIR_SRC\n"
    info "     DIR_BUILD   = $DIR_BUILD\n"

    TOOLCHAIN_PREFIX="$TOOLCHAIN_DIR/bin/$TARGET_HOST$TARGET_API-"

    CC="${TOOLCHAIN_PREFIX}clang"
    is_exist_and_executable "$CC" && export CC="$CC"
    info "    CC = $CC\n"

    CXX="${TOOLCHAIN_PREFIX}clang++"
    is_exist_and_executable "$CXX" && export CXX="$CXX"
    info "   CXX = $CXX\n"
    
    if [ "$TARGET_HOST" = 'armv7a-linux-androideabi' ] ; then
        TOOLCHAIN_PREFIX="$TOOLCHAIN_DIR/bin/arm-linux-androideabi-"
    else
        TOOLCHAIN_PREFIX="$TOOLCHAIN_DIR/bin/$TARGET_HOST-"
    fi

    info "TOOLCHAIN_PREFIX = $TOOLCHAIN_PREFIX\n"
    
    AR="${TOOLCHAIN_PREFIX}ar"
    is_exist_and_executable "$AR" && export AR="$AR"
    info "    AR = $AR\n"

    AS="${TOOLCHAIN_PREFIX}as"
    is_exist_and_executable "$AS" && export AS="$AS"
    info "    AS = $AS\n"

    LD="${TOOLCHAIN_PREFIX}ld"
    is_exist_and_executable "$LD" && export LD="$LD"
    info "    LD = $LD\n"

    NM="${TOOLCHAIN_PREFIX}nm"
    is_exist_and_executable "$NM" && export NM="$NM"
    info "    NM = $NM\n"
     
    RANLIB="${TOOLCHAIN_PREFIX}ranlib"
    is_exist_and_executable "$RANLIB" && export RANLIB="$RANLIB"
    info "RANLIB = $RANLIB\n"
     
    STRIP="${TOOLCHAIN_PREFIX}strip"
    is_exist_and_executable "$STRIP" && export STRIP="$STRIP"
    info " STRIP = $STRIP\n"

    CPPFLAGS=''
    LDFLAGS=''

    for item in $(printf "$DEPENDENCIES")
    do
        item=$(printf "$item" | tr '-' '_')
        ITEM_DIR_INSTALL_PREFIX="$DIR_PKG/$item/$TARGET_ABI"
        ITEM_DIR_INCLUDE="$ITEM_DIR_INSTALL_PREFIX/include"
        ITEM_DIR_LIB="$ITEM_DIR_INSTALL_PREFIX/lib"

        eval "${item}_DIR_INSTALL_PREFIX='$ITEM_DIR_INSTALL_PREFIX'"
        eval "${item}_DIR_INCLUDE='$ITEM_DIR_INCLUDE'"
        eval "${item}_DIR_LIB='$ITEM_DIR_LIB'"
        CPPFLAGS="-I$ITEM_DIR_INCLUDE $CPPFLAGS"
        LDFLAGS="-L$ITEM_DIR_LIB     $LDFLAGS"
    done

    export CFLAGS='-Os -fpic -Qunused-arguments'
    
    [ "$VERBOSE" = 'true' ] && export CFLAGS="$CFLAGS -v"

    export CPPFLAGS="$CPPFLAGS -Qunused-arguments"
    export LDFLAGS="$LDFLAGS"
     
    info "CFLAGS  =$CFLAGS\n"
    info "CPPFLAGS=$CPPFLAGS\n"
    info "LDFLAGS =$LDFLAGS\n"
     
    info "-------------------------------------------------------\n"
}

get_direct_dependencies_of_a_package() {
    grep '^dependencies=".*"' "$DIR_FORMULA/$1.sh" | sed 's/dependencies="\(.*\)"/\1/'
}

get_dependencies_of_a_package() {
    for dependencyPkgName in $(get_direct_dependencies_of_a_package "$1")
    do
        is_package_available "$dependencyPkgName" || package_is_not_available_error_exit "$dependencyPkgName"
        DEPENDENCIES="$dependencyPkgName $DEPENDENCIES"
        get_dependencies_of_a_package "$dependencyPkgName"
    done
}

parse_params() {
    while test -n "$1"
    do
        case "$1" in
            --target-api=[1-9][0-9])
                TARGET_API=$(msg "$1" | cut -d= -f2)
                ;;
            --target-abi=*)
                TARGET_ABI=$(msg "$1" | cut -d= -f2)
                ;;
            --verbose|-v)
                VERBOSE=true
                ;;
            [0-9a-zA-Z]*)
                if [ -z "$PKGS" ] ; then
                    PKGS="$1"
                else
                    PKGS="$PKGS $1"
                fi
                ;;
            *)  error_exit "$1 is a invalid param.\n"
        esac
        shift
    done
}

is_package_available() {
    [ -z "$1" ] && package_is_not_provided_error_exit
    [ -f "$DIR_FORMULA/$1.sh" ]
}

is_package_installed() {
    [ -z "$1" ] && package_is_not_provided_error_exit
    [ -d "$DIR_PKG/$1" ] &&
    [ -f "$DIR_PKG/$1/installed" ]
}

is_package_outdated() {
    [ -z "$1" ] && package_is_not_provided_error_exit
    [ -z "$2" ] || warn "outdated? command accept only one parameter.\n"
    
    is_package_available "$1" || package_is_not_available_error_exit "$1"
    is_package_installed "$1" || package_is_not_installed_error_exit "$1"

    load_formula_of_a_package "$1"
    load_installed_info_of_a_package "$1"

    [ "$version" = "$installed_pkg_version" ] && return 1
    [ "$version" = $(msg "$version\n$installed_pkg_version" | sort --version-sort --reverse | head -n 1) ]
}

package_is_not_installed_error_exit() {
    error_exit "$1 is not installed.\n"
}

package_is_not_available_error_exit() {
    error_exit "$1 is not available.\n"
}

package_is_not_provided_error_exit() {
    error_exit "please provide a package name.\n"
}

packages_is_not_provided_error_exit() {
    error_exit "please provide at least one package name.\n"
}

is_sha256_match() {
    if command -v openssl > /dev/null ; then
        [ "$(openssl sha256 "$1" | awk '{print $2}')" = "$sha256" ]
    elif command -v sha256sum > /dev/null ; then
        [ "$(sha256sum "$1" | awk '{print $1}')" = "$sha256" ]
    else
        error_exit "please install openssl or GNU CoreUtils.\n"
    fi
}

sha256_not_match_error_exit() {
    error_exit "sha256sum not match.\n"
}

fetch_internal() {
    [ -d "$DIR_DOWNLOAD" ] || mkdir -p "$DIR_DOWNLOAD"
    cd "$DIR_DOWNLOAD" || error_exit "error.\n"
    
    if command -v curl > /dev/null ; then
        info "Downloding $url\n" &&
        curl -LO "$url" &&
        success "Downloaded $SRC_FILE_PATH\n"
    elif command -v wget > /dev/null ; then
        info "Downloding $url\n" &&
        wget "$url" &&
        success "Downloaded $SRC_FILE_PATH\n"
    else
        error_exit "please install curl or wget.\n"
    fi
}

fetch_if_needed() {
    SRC_FILE_NAME=$(basename "$url") && 
    SRC_FILE_NAME_EXT=$(printf "$SRC_FILE_NAME" | awk -F. '{print $NF}') && 
    SRC_FILE_PATH="$DIR_DOWNLOAD/$SRC_FILE_NAME"
        
    if [ -f "$SRC_FILE_PATH" ] ; then
        if is_sha256_match "$SRC_FILE_PATH" ; then
            info "$SRC_FILE_PATH is already downloaded.\n"
        else
            rm "$SRC_FILE_PATH" && fetch_internal
        fi
    else
        fetch_internal
    fi
}

fetch_a_package() {
    load_formula_of_a_package "$1"
    fetch_if_needed
}

uncompress() {
    case "$2" in
        zip) unzip "$1";;
        xz|gz|bz2) tar xf "$1" --strip-components 1;;
        *) false;;
    esac
}

install_packages() {
    [ -z "$1" ] && packages_is_not_provided_error_exit
    
    for toBeInstalledPkgName in $@
    do
        get_dependencies_of_a_package "$toBeInstalledPkgName"
    done

    for toBeInstalledPkgName in $(printf "$DEPENDENCIES $@")
    do
        is_package_installed "$toBeInstalledPkgName" &&
        success "$toBeInstalledPkgName is already installed.\n" &&
        continue
        install_a_package "$toBeInstalledPkgName"
    done
}

install_a_package() {
    fetch_a_package "$1"
    
    is_sha256_match "$SRC_FILE_PATH" || sha256_not_match_error_exit

    DIR_SRC=$(mktemp -d) &&
    cd "$DIR_SRC" &&
    info "uncompressing $SRC_FILE_PATH\n" &&
    uncompress "$SRC_FILE_PATH" "$SRC_FILE_NAME_EXT" &&
    success "uncompressed in $DIR_SRC\n" && {
        [ -d "$DIR_PKG/$1" ] && rm -rf "$DIR_PKG/$1"
    } &&
    install_a_package_for_all_target_abis "$1" &&
    install_a_package_success "$1" &&
    rm -rf "$DIR_SRC"
}

install_a_package_for_all_target_abis() {
    unset "build_$TIMESTAMP"
    
    for TARGET_ABI in $(printf "$TARGET_ABIS")
    do
        make_env "$1" && {
            eval test -z "$"build_$TIMESTAMP && {
                eval "build_$TIMESTAMP='true'"
                build_first 2> /dev/null
            } || true
        } && build || error_exit "build failed!\n"
    done
}

install_a_package_success() {
    [ -d "$DIR_INSTALL_PACKAGE" ] || error_exit "$1 build failed. installed nothing.\n"
    
    msg "installed_time=$TIMESTAMP\ninstalled_pkg_version=$version\ninstalled_ndk_version=$ANDROID_NDK_VERSION\ninstalled_target_api=$TARGET_API" > "$DIR_INSTALL_PACKAGE/installed"
    success "$1 build success. in $DIR_INSTALL_PACKAGE directory.\n"
    command -v tree > /dev/null && tree -L 3 "$DIR_INSTALL_PACKAGE"
}

tree_a_installed_package() {
    DIR_INSTALL_PACKAGE="$DIR_PKG/$1"
    [ -d "$DIR_INSTALL_PACKAGE" ] || package_is_not_installed_error_exit "$1"
    shift
    command -v tree > /dev/null || error_exit "please install tree utility.\n"
    tree $@ "$DIR_INSTALL_PACKAGE"
}

uninstall_packages() {
    [ -z "$1" ] && packages_is_not_provided_error_exit
    
    for packageName in $@
    do
        uninstall_a_package "$packageName"
    done
}

uninstall_a_package() {
    [ -d "$DIR_PKG/$1" ] || package_is_not_installed_error_exit "$1"
    info "uninstalling $1...\n" &&
    rm -rf "$DIR_PKG/$1" &&
    success "$1 uninstalled.\n"
}

list_available_packages() {
    [ -d "$DIR_FORMULA" ] || update_formula_repository
    cd "$DIR_FORMULA" || error_exit "$DIR_FORMULA is not exsit.\n"
    for item in *.sh
    do 
        printf "$item\n" | sed 's/.sh//g'
    done
}

list_installed_packages() {
    [ -d "$DIR_PKG" ] || error_exit "no any package installed.\n"
    cd "$DIR_PKG"     || error_exit "no any package installed.\n"
    for packageName in *
    do
        is_package_installed "$packageName" && msg "$packageName\n"
    done
}

list_outdated_packages() {
    [ -d "$DIR_PKG" ] || error_exit "no any package installed.\n"
    cd "$DIR_PKG"     || error_exit "no any package installed.\n"
    for packageName in *
    do
        is_package_available "$packageName" || continue
        is_package_installed "$packageName" || continue
        is_package_outdated  "$packageName" && msg "$packageName\n"
    done
}

info_packages() {
    if [ -z "$1" ] ; then
        [ -d "$DIR_FORMULA" ] || update_formula_repository
        cd "$DIR_FORMULA" || error_exit "$DIR_FORMULA is not exsit.\n"
        unset INFO
        for item in *.sh
        do 
            [ -z "$INFO" ] || msg "-----------------------------------------------------------\n"; 
            info_a_package $(printf "$item" | sed 's/.sh//g')
            INFO=true
        done
    else
        unset INFO
        for packageName in $@
        do 
            [ -z "$INFO" ] || msg "-----------------------------------------------------------\n"; 
            info_a_package "$packageName"
            INFO=true
        done
    fi
}

info_a_package() {
    load_formula_of_a_package "$1"
     
    msg "name      : $1\n"
    msg "summary   : $summary\n"
    msg "homepage  : $homepage\n"
    msg "available : $version\n"
    
    [ -z "$dependencies" ] || {
        msg "depend_on :"
        unset DEPENDENCIES
        for dependencyPkgName in $(printf "$dependencies")
        do
            if [ -z "$DEPENDENCIES" ] ; then
                DEPENDENCIES=true
                msg " "
            else
                msg "            "
            fi

            if is_package_installed "$dependencyPkgName" ; then
                msg "$dependencyPkgName ${Color_Green}✔${Color_Off}\n"
            else
                msg "$dependencyPkgName ${Color_Red}✘${Color_Off}\n"
            fi
        done
    }
     
    if is_package_installed "$1" ; then
        load_installed_info_of_a_package "$1"
        msg "installed ${Color_Purple}==>${Color_Off} $(du -sh "$DIR_PKG/$1" | awk '{print $2, $1}')\n"
        msg "install_time: $(convert_unix_timestamp_to_format_string $installed_time '+%Y/%m/%d %H:%M:%S')\n"
        msg "pkg_version : $installed_pkg_version\n"
        msg "ndk_version : $installed_ndk_version\n"
        msg "target_api  : $installed_target_api\n"
    else
        msg "installed : ${Color_Red}✘${Color_Off}\n"
    fi
}

load_formula_of_a_package() {
    is_package_available "$1" || package_is_not_available_error_exit "$1"

    unset -f build_first
    unset -f build
    unset url
    unset sha256
    unset version
    unset summary
    unset homepage
    unset dependencies
    
    FORMULA_FILE_PATH="$DIR_FORMULA/$1.sh"
     
    . "$FORMULA_FILE_PATH" || error_exit "$FORMULA_FILE_PATH is broken.\n"
    
    [ -z "$summary" ]  && error_exit "summary variable must be provided in $FORMULA_FILE_PATH\n"
    [ -z "$homepage" ] && error_exit "homepage variable must be provided in $FORMULA_FILE_PATH\n"
    [ -z "$sha256" ]   && error_exit "sha256 variable must be provided in $FORMULA_FILE_PATH\n"
    [ -z "$url" ]      && error_exit "url variable must be provided in $FORMULA_FILE_PATH\n"
    [ -z "$version" ]  && version="$(basename "$url" | awk '{str = tolower($0); gsub(".tar.xz", "", str); gsub(".tar.gz", "", str); gsub(".tar.bz2", "", str); gsub(".tgz", "", str); gsub(".zip", "", str); print(str)}' | awk -F- '{print $NF}')"
    [ -z "$version" ]  && error_exit "version can't be parsed in $FORMULA_FILE_PATH\n"
}

load_installed_info_of_a_package() {
    unset installed_time
    unset installed_pkg_version
    unset installed_ndk_version
    unset installed_target_api
    
    . "$DIR_PKG/$1/installed"

    #msg "$1:\navailable_version=$version\ninstalled_version=$installed_pkg_version\n"
}

cat_formula_of_a_package() {
    [ -z "$1" ] && package_is_not_provided_error_exit
    [ -z "$2" ] || warn "cat command accept only one parameter.\n"
    
    is_package_available "$1" || package_is_not_available_error_exit "$1"
    
    cat "$DIR_FORMULA/$1.sh"
}

edit_formula_of_a_package() {
    [ -z "$1" ] && package_is_not_provided_error_exit
    [ -z "$2" ] || warn "edit command accept only one parameter.\n"
    
    is_package_available "$1" || package_is_not_available_error_exit "$1"
    
    [ -z "$EDITOR" ] || EDITOR='vi'
    command -v "$EDITOR" > /dev/null || EDITOR='vim'
    command -v "$EDITOR" > /dev/null || EDITOR='nano'
    command -v "$EDITOR" > /dev/null || EDITOR='open'
    command -v "$EDITOR" > /dev/null || error_exit "please config EDITOR environment\n"
    "$EDITOR" "$DIR_FORMULA/$1.sh"
}

update_formula_repository() {
    info "Updating formula repository.\n"

    if [ -d "$DIR_FORMULA" ] ; then
        if  git -C "$DIR_FORMULA" rev-parse 2> /dev/null ; then
            git -C "$DIR_FORMULA" pull
        else
            rm -rf "$DIR_FORMULA" &&
            git -C "$NDK_PKG_HOME" clone "$FORMULA_REPO_URL" formula
        fi
    else
        mkdir -p "$NDK_PKG_HOME" &&
        git -C "$NDK_PKG_HOME" clone "$FORMULA_REPO_URL" formula
    fi
    
    if [ $? -eq 0 ] ; then
        success "update formula repository success.\n"
    else
        error_exit "update formula repository failed.\n"
    fi
}

upgrade_packages() {
    if [ -z "$1" ] ; then
        toBeUpgradePkgNames=$(list_outdated_packages)
        [ -z "$toBeUpgradePkgNames" ] && return 0
        reinstall_packages $toBeUpgradePkgNames
    else
        reinstall_packages $@
    fi
}

reinstall_packages() {
    [ -z "$1" ] && packages_is_not_provided_error_exit
     
    for packageName in $@
    do
        is_package_available "$packageName" || package_is_not_available_error_exit "$packageName"
        is_package_installed "$packageName" || package_is_not_installed_error_exit "$packageName"
    done
    
    for packageName in $@
    do
        {
            [ -d "$DIR_BACKUP" ] || mkdir -p "$DIR_BACKUP"
        } &&
        mv "$DIR_PKG/$packageName" "$DIR_BACKUP/$packageName" &&
        install_a_package "$packageName" &&
        rm -rf "$DIR_BACKUP/$packageName"
    done
}

cleanup() {
    success "Done.\n"
}

search_packages() {
    [ -z "$1" ] && error_exit "please provide a keyword.\n"
    [ -d "$DIR_FORMULA" ] || update_formula_repository
    cd "$DIR_FORMULA" && {
        for item in *.sh
        do
            basename "$item" ".sh" | grep "$*"
        done
    }
}

open_homepage_of_a_package() {
    if [ -z "$1" ] ; then
        homepage="https://github.com/leleliu008/ndk-pkg"
    else
        load_formula_of_a_package "$1"
    fi
    command -v open > /dev/null && open "$homepage"
}

print_prefix_of_a_package() {
    if [ -z "$1" ] ; then
        msg "$NDK_PKG_HOME\n"
    else
        is_package_installed "$1" || package_is_not_installed_error_exit "$1"
        msg "$DIR_PKG/$1\n"
    fi
}

logs_a_package() {
    [ -z "$1" ] && package_is_not_provided_error_exit
    is_package_installed "$1" || package_is_not_installed_error_exit "$1"
    
    FILE_PATH_LOGS="$DIR_PKG/$1/logs"
    
    if [ -f "$FILE_PATH_LOGS" ] ; then
        success "$FILE_PATH_LOGS ===>\n"
        cat "$FILE_PATH_LOGS"
    else
        warn "no logs.\n"
    fi
}

pack_a_package() {
    [ -z "$1" ] && package_is_not_provided_error_exit
    is_package_installed "$1" || package_is_not_installed_error_exit "$1"
    
    [ -d "$DIR_BOTTLE" ] || mkdir -p "$DIR_BOTTLE"
    
    if command -v tar > /dev/null ; then
        if command -v gzip > /dev/null ; then
            FILE_PATH_BOTTLE="$DIR_BOTTLE/$1-bottle.tar.gz"
            info "packing $1...\n" &&
            tar zvcf "$FILE_PATH_BOTTLE" -C "$DIR_PKG" "$1"
        elif command -v xz > /dev/null ; then
            FILE_PATH_BOTTLE="$DIR_BOTTLE/$1-bottle.tar.xz"
            info "packing $1...\n" &&
            tar zvcf "$FILE_PATH_BOTTLE" -C "$DIR_PKG" "$1"
        elif command -v bzip2 > /dev/null ; then
            FILE_PATH_BOTTLE="$DIR_BOTTLE/$1-bottle.tar.bz2"
            info "packing $1...\n" &&
            tar zvcf "$FILE_PATH_BOTTLE" -C "$DIR_PKG" "$1"
        fi
    elif command -v zip > /dev/null ; then
        FILE_PATH_BOTTLE="$DIR_BOTTLE/$1-bottle.zip"
        cd "$DIR_PKG" &&
        info "packing $1...\n" &&
        zip -r "$FILE_PATH_BOTTLE" "$1"
    fi
    
    if [ $? -eq 0 ] ; then
        success "packed success. $FILE_PATH_BOTTLE\n"
    else
        error_exit "pack $1 failed.\n"
    fi
}

help() {
    cat << EOF
Usage: ndk-pkg [COMMAND [ARGUMENT...]]
COMMAND:
    help | --help | -h     --show help information.
    version | --version -V --print version of ndk-pkg and NDK.
    
    list target-abis       --list the supported target abis.
    list target-apis       --list the supported target api levels.
    list available         --list the available packages.
    list installed         --list the installed packages.
    list outdated          --list the outdated packages.
    
    search KEYWORD         --search packages.
    
    cat  PKG_NAME          --show the formula source code of a package.
    edit PKG_NAME          --edit the formula source code of a package.
    tree PKG_NAME          --list contents of a installed package directory in a tree-like format.
    pack PKG_NAME          --pack a installed package.
    logs PKG_NAME          --print the logs of a installed package.
    fetch PKG_NAME         --download formula resources of a package to the cache.
    prefix PKG_NAME        --show the installation direcotory of a formula or the ndk-pkg home.
    homepage PKG_NAME      --visit the homepage of a formula or the ndk-pkg project.
    
    env  PKG_NAME --target-api=21 --target-abi=armeabi-v7a -v
    
    install   PKG_NAME... [--target-api=21 -v]     --install packages.
    reinstall PKG_NAME... [--target-api=21 -v]     --reinstall packages.
    upgrade   PKG_NAME... [--target-api=21 -v]     --upgrade packages.
    uninstall PKG_NAME...                          --uninstall packages.
    info      PKG_NAME...                          --print the information of packages.
    
    cleanup          --cleanup the unused cache.
    update           --update the formula repository.
EOF
    if [ -z "$1" ] ; then
        exit
    else
        exit "$1"
    fi
}

main() {
    TIMESTAMP="$(date +%s)"
    OS_NAME="$(uname -s | awk '{print(tolower($1))}')"
    
    case "$1" in
        --help|help|-h) 
            help
            ;;
        --version|version|-V)
            msg "ndk-pkg $VERSION\n"
            check_ANDROID_NDK_HOME
            msg "NDK     $(get_ndk_version)\n"
            ;;
        list)
            shift
            case "$1" in
                target-abis)
                    shift
                    list_target_abis
                    ;;
                target-apis)
                    shift
                    list_target_apis
                    ;;
                available)
                    shift
                    list_available_packages
                    ;;
                installed)
                    shift
                    list_installed_packages
                    ;;
                outdated)
                    shift
                    list_outdated_packages
                    ;;
                *) help 1
            esac
            ;;
        tree)
            shift
            tree_a_installed_package "$@"
            ;;
        search)
            shift
            search_packages "$*"
            ;;
        env) 
            shift
            check_ANDROID_NDK_HOME
            check_ANDROID_NDK_VERSION
            parse_params "$@"
            [ "$(printf "$PKGS" | awk '{print NF}')" -gt 1 ] && error_exit "env command accept only one package name.\n"
            make_env "$PKGS"
            ;;
        install)
            shift
            check_ANDROID_NDK_HOME
            check_ANDROID_NDK_VERSION
            parse_params "$@"
            install_packages "$PKGS"
            ;;
        reinstall)
            shift
            check_ANDROID_NDK_HOME
            check_ANDROID_NDK_VERSION
            parse_params "$@"
            reinstall_packages "$PKGS"
            ;;
        upgrade)
            shift
            check_ANDROID_NDK_HOME
            check_ANDROID_NDK_VERSION
            parse_params "$@"
            upgrade_packages "$PKGS"
            ;;
        uninstall)
            shift
            uninstall_packages "$@"
            ;;
        info)
            shift
            info_packages "$@"
            ;;
        cat)
            shift
            cat_formula_of_a_package "$@"
            ;;
        edit)
            shift
            edit_formula_of_a_package "$@"
            ;;
        update)
            update_formula_repository;;
        cleanup)
            cleanup;;
        homepage)
            shift
            open_homepage_of_a_package "$@"
            ;;
        prefix)
            shift
            print_prefix_of_a_package "$@"
            ;;
        fetch)
            shift
            fetch_a_package "$@"
            ;;
        logs)
            shift
            logs_a_package "$@"
            ;;
        pack)
            shift
            pack_a_package "$@"
            ;;
        *) help 1
    esac
}

main "$@"
